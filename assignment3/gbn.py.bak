import udt
import util
import config
import time
import collections
import threading
import _thread


# Go-Back-N reliable transport protocol.
class GoBackN:
  _N = 8
  # "msg_handler" is used to deliver messages to application layer
  # when it's ready.
  def __init__(self, local_port, remote_port, msg_handler):
    self.network_layer = udt.NetworkLayer(local_port, remote_port, self)
    self.msg_handler = msg_handler
    self.next_seq_number = 1
    self.base_seq_number = 1
    self.seq_number_sema = threading.BoundedSemaphore(value = self._N)
    self.base_seq_number_lock = threading.Lock()
    self.next_seq_number_lock = threading.Lock()

  # "send" is called by application. Return true on success, false
  # otherwise.
  def send(self, msg):
    # TODO: impl protocol to send packet from application layer.
    # call self.network_layer.send() to send to network layer.
    msg_size = len(msg)
    bytes_sent = 0
    start = 0
    end = 0
    send_pkts = {}
    try:
        while True:
          with self.base_seq_number_lock:
            base_seq_number = self.base_seq_number

          while not self.next_seq_number_lock.acquire(blocking = False):
            pass
          if self.next_seq_number < base_seq_number + self._N:
            if self.next_seq_number not in send_pkts:
              if bytes_sent < msg_size:
                if msg_size - bytes_sent < config.MAX_MESSAGE_SIZE:
                  end = msg_size
                else:
                  end += config.MAX_MESSAGE_SIZE

                pkt = util.make_pkt(config.MSG_TYPE_DATA, self.next_seq_number, msg[start:end])
                send_pkts[self.next_seq_number] = pkt
                bytes_sent += (end - start)
                start = end
              else:
                self.next_seq_number_lock.release()
                return True

            self.network_layer.send(send_pkts[self.next_seq_number])
            print("Sent packet with seq_number: ", self.next_seq_number)
            if self.next_seq_number == base_seq_number:
              # start timer
              _thread.start_new_thread(self.start_timer_and_wait_for_ack, (base_seq_number,))

            self.next_seq_number += 1
          self.next_seq_number_lock.release()
    except:
      raise
      # return False
    return True

  def start_timer_and_wait_for_ack(self, expected_seq_number):
    print("Starting timer for seq_number: ", expected_seq_number)
    timer_expiry = time.time() + config.TIMEOUT_MSEC/1000.0
    while time.time() < timer_expiry:
      time.sleep(0.001)
      while not self.base_seq_number_lock.acquire(blocking = False):
        pass
      if self.base_seq_number > expected_seq_number:
        self.start_timer_and_wait_for_ack(self.base_seq_number)
      self.base_seq_number_lock.release()
      #   if len(self.msg_buffer) > 0 and util.pkt_seq_number(self.msg_buffer[0]) == seq_number:
      #     return self.msg_buffer.popleft()
    print("Timer expired for expected seq_number: ", expected_seq_number)
    while not self.next_seq_number_lock.acquire(blocking = False):
      pass
    while not self.base_seq_number_lock.acquire(blocking = False):
      pass
    self.next_seq_number = self.base_seq_number
    print("Setting next_seq_number to ", self.base_seq_number)
    self.base_seq_number_lock.release()
    self.next_seq_number_lock.release()

  # "handler" to be called by network layer when packet is ready.
  def handle_arrival_msg(self):
    # TODO: impl protocol to handle arrived packet from network layer.
    # call self.msg_handler() to deliver to application layer.
    msg = self.network_layer.recv()
    print("Received packet: ", msg)
    
    if util.is_corrupt_pkt(msg):
      print("Received corrupt packet: ", msg)
      return

    seq_number = util.pkt_seq_number(msg)
    if util.is_ack_pkt(msg):
      print("Received ack packet: ", msg)
      while not self.base_seq_number_lock.acquire(blocking = False):
        pass
      if seq_number >= self.base_seq_number and seq_number < self.base_seq_number + self._N:
        self.base_seq_number = seq_number + 1
        print("Incremented base_seq_number to ", self.base_seq_number)
      self.base_seq_number_lock.release()
    else:
      self.msg_handler(util.pkt_data(msg))
      ack_pkt = util.make_pkt(config.MSG_TYPE_ACK, seq_number)
      self.network_layer.send(ack_pkt)

  # Cleanup resources.
  def shutdown(self):
    # TODO: cleanup anything else you may have when implementing this
    # class.
    self.network_layer.shutdown()
